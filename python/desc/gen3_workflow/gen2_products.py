"""
Module to keep track of data products produced by DRP coadd/mulitband
pipe tasks.
"""
import os


__all__ = ['Gen2Products', 'missing_outputs']


class Gen2Products:
    """
    Class to return FITS data products generated by DRP coadd/multiband
    pipe tasks.
    """
    ftp_prefixes = {'detectCoaddSources': 'det bkgd calexp'.split(),
                    'deblendCoaddSources': 'deblendedFlux'.split(),
                    'measureCoaddSources': 'srcMatchFull srcMatch meas'.split(),
                    'forcedPhotCoadd': 'forced_src'.split()}
    merge_prefixes = {'mergeCoaddDetections': 'mergeDet'.split(),
                      'mergeCoaddMeasurements': 'ref'.split()}
    def __init__(self, rerun_dir):
        """
        Parameters
        ----------
        rerun_dir: str
             Path to rerun directory that contains the data products.
        """
        self.rerun_dir = rerun_dir

    def makeCoaddTempExp_outputs(self, band, tract, patch, visit):
        """
        Parameters
        ----------
        band: str
            Filter name of bandpass, i.e., one of `ugrizy`.
        tract: int
            Tract number.
        patch: str
            Patch id, e.g., '0,0'.
        visit: int
            Visit number.

        Returns
        -------
        (<warp filepath>, <psfMatchedWarp filepath>)
        """
        warp_dir = os.path.join(self.rerun_dir, 'deepCoadd', band, str(tract),
                                patch)
        def warp_file(prefix):
            return os.path.join(warp_dir,
                                f'{prefix}-{band}-{tract}-{patch}-{visit}.fits')

        return warp_file('warp'), warp_file('psfMatchedWarp')

    def assembleCoadd_outputs(self, band, tract, patch):
        """
        Parameters
        ----------
        band: str
            Filter name of bandpass, i.e., one of `ugrizy`.
        tract: int
            Tract number.
        patch: str
            Patch id, e.g., '0,0'.

        Returns
        -------
        (<coadd filepath>, <nImage filepath>)
        """
        coadd_dir = os.path.join(self.rerun_dir, 'deepCoadd', band, str(tract))
        return (os.path.join(coadd_dir, f'{patch}.fits'),
                os.path.join(coadd_dir, f'{patch}_nImage.fits'))

    def ftp_task_outputs(self, pipe_task, band, tract, patch):
        """
        Function to return filepaths of FITS data products for pipe tasks
        that take dataIds of `{filter, task, patch}`.

        Parameters
        ----------
        pipe_task: str
            Pipe task name, e.g., 'detectCoaddSources'.
        band: str
            Filter name of bandpass, i.e., one of `ugrizy`.
        tract: int
            Tract number.
        patch: str
            Patch id, e.g., '0,0'.

        Results
        -------
        list of filepaths to FITS data products
        """
        results_dir = os.path.join(self.rerun_dir, 'deepCoadd-results', band,
                                   str(tract), patch)
        def results_file(prefix):
            return os.path.join(results_dir,
                                f'{prefix}-{band}-{tract}-{patch}.fits')
        return [results_file(_) for _ in self.ftp_prefixes[pipe_task]]

    def merge_task_outputs(self, pipe_task, tract, patch):
        """
        Function to return filepaths of FITS data products for pipe tasks
        that merge catalogs over bandpasses.

        Parameters
        ----------
        pipe_task: str
            Pipe task name, e.g., 'mergeCoaddDetections'
        tract: int
            Tract number.
        patch: str
            Patch id, e.g., '0,0'.

        Results
        -------
        list of filepaths to FITS data products
        """
        merged_dir = os.path.join(self.rerun_dir, 'deepCoadd-results',
                                  'merged', str(tract), patch)
        def merged_file(prefix):
            return os.path.join(merged_dir, f'{prefix}-{tract}-{patch}.fits')
        return [merged_file(_) for _ in self.merge_prefixes[pipe_task]]


def missing_outputs(outputs):
    """
    Return a list of missing output files from a list of possible outputs.
    """
    return [_ for _ in outputs if not os.path.isfile(_)]
